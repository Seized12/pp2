1.class StringManipulator:
    def __init__(self):
        self.input_string = ""

    def getString(self):
        self.input_string = input()

    def printString(self):
        print(self.input_string.upper())

string_manipulator = StringManipulator()

string_manipulator.getString()
string_manipulator.printString()
2.
class Shape:
    def area(self):
        print("Площадь фигуры:", 0)

class Square(Shape):
    def __init__(self, length):
        self.length = length

    def area(self):
        area_square = self.length * self.length
        print(area_square)

shape = Shape()
shape.area()

square = Square(5)
square.area()
3.
class Shape:
    def area(self):
        print(0)


class Rectangle(Shape):
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        area_rectangle = self.length * self.width
        print(area_rectangle)

rectangle = Rectangle(4, 6)
rectangle.area()
4.
import math

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def show(self):
        print(f"Координаты точки: ({self.x}, {self.y})")

    def move(self, dx, dy):
        self.x += dx
        self.y += dy

    def dist(self, other_point):
        distance = math.sqrt((self.x - other_point.x)**2 + (self.y - other_point.y)**2)
        return distance

point1 = Point(1, 2)
point2 = Point(4, 6)

point1.show()
point2.show()

point1.move(2, 3)
point1.show()

distance = point1.dist(point2)
print(f"Расстояние между точками: {distance}")
5)
class Account:
    def __init__(self, owner, initial_balance=0):
        self.owner = owner
        self.balance = initial_balance

    def deposit(self):
        amount = float(input("Введите сумму для пополнения счета: "))
        if amount > 0:
            self.balance += amount
            print(f"Счет пополнен на {amount} тенге. Новый баланс: {self.balance} тенге.")
        else:
            print("Некорректная сумма для пополнения.")

    def withdraw(self, amount):
        if 0 < amount <= self.balance:
            self.balance -= amount
            print(f"Сумма {amount} тенге успешно снята. Новый баланс: {self.balance} тенге.")
        else:
            print("Недостаточно средств на счету или некорректная сумма для снятия.")

my_account = Account("Иван", 1000)
my_account.deposit()
withdraw_amount = float(input("Введите сумму для снятия: "))
my_account.withdraw(withdraw_amount)

withdraw_amount = float(input("Введите сумму для снятия: "))
my_account.withdraw(withdraw_amount)
6.
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
prime_numbers = filter(lambda x: is_prime(x), numbers)
print("Простые числа в списке:", list(prime_numbers))
7.
def grams_to_ounces(grams):
    ounces = 28.3495231 * grams
    return ounces

grams_input = float(input("Введите значение в граммах: "))
ounces_output = grams_to_ounces(grams_input)
print(f"{grams_input} грамм(а) равно {ounces_output} унций")
8.
def fahrenheit_to_celsius(fahrenheit):
    celsius = (5 / 9) * (fahrenheit - 32)
    return celsius

fahrenheit_input = float(input("Введите температуру в градусах Фаренгейта: "))
celsius_output = fahrenheit_to_celsius(fahrenheit_input)
print(f"{fahrenheit_input} градусов Фаренгейта равно {celsius_output} градусам Цельсия")
9.
def solve(numheads, numlegs):
    for numrabbits in range(numheads + 1):
        numchickens = numheads - numrabbits
        totallegs = 4 * numrabbits + 2 * numchickens
        if totallegs == numlegs:
            return numchickens, numrabbits
    return "No solution found"

num_heads = 35
num_legs = 94


result = solve(num_heads, num_legs)
print("Количество кур и кроликов соответственно:", result)
10.
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def filter_prime(numbers):
    prime_numbers = []
    for num in numbers:
        if is_prime(num):
            prime_numbers.append(num)
    return prime_numbers


numbers = list(map(int, input("Введите числа через пробел: ").split()))
prime_numbers = filter_prime(numbers)
print("Простые числа из списка:", prime_numbers)
11.
def permutations(s):
    if len(s) <= 1:
        return [s]
    
    result = []
    for i, char in enumerate(s):
        for perm in permutations(s[:i] + s[i+1:]):
            result.append(char + perm)
    
    return result


user_input = input("Введите строку: ")
perms = permutations(user_input)
print("Перестановки строки:")
for perm in perms:
    print(perm)
12.
def reverse_words(sentence):
    words = sentence.split()  
    reversed_words = reversed(words)  
    reversed_sentence = ' '.join(reversed_words) 
    return reversed_sentence


user_input = input("Введите строку: ")
reversed_sentence = reverse_words(user_input)
print("Предложение с перевернутыми словами:", reversed_sentence)
13.
def has_33(nums):
    for i in range(len(nums) - 1):
        if nums[i] == 3 and nums[i + 1] == 3:
            return True
    return False


print(has_33([1, 3, 3])) 
print(has_33([1, 3, 1, 3])) 
print(has_33([3, 1, 3]))   
14.
def spy_game(nums):
    code = [0, 0, 7] 
    index = 0 

    for num in nums:
        if num == code[index]:
            index += 1
            if index == len(code):
                return True
    return False
print(spy_game([1,2,4,0,0,7,5]))  
print(spy_game([1,0,2,4,0,5,7]))  
print(spy_game([1,7,2,0,4,5,0]))  
15.
import math

def sphere_volume(radius):
    volume = (4/3) * math.pi * radius**3
    return volume

radius = float(input("Введите радиус сферы: "))
volume = sphere_volume(radius)
print("Объем сферы с радиусом", radius, "равен", volume)
16.
def unique_list(lst):
    unique_lst = []
    for item in lst:
        if item not in unique_lst:
            unique_lst.append(item)
    return unique_lst
original_list = [1, 2, 2, 3, 3, 4, 5, 5]
new_list = unique_list(original_list)
print("Новый список с уникальными элементами:", new_list)
17.
def is_palindrome(s):
    s = s.lower().replace(" ", "")

    return s == s[::-1]

print(is_palindrome("мадам"))  
print(is_palindrome("А роза упала на лапу Азора"))  
print(is_palindrome("hello"))  
18.
def histogram(numbers):
    for num in numbers:
        print('*' * num)


numbers = [4, 9, 7]
histogram(numbers)
19.
import random

def guess_the_number():
    print("Hello! What is your name?")
    name = input()
    
    print(f"Well, {name}, I am thinking of a number between 1 and 20.")

    secret_number = random.randint(1, 20)
    guesses_taken = 0

    while True:
        print("Take a guess.")
        guess = int(input())

        guesses_taken += 1

        if guess < secret_number:
            print("Your guess is too low.")
        elif guess > secret_number:
            print("Your guess is too high.")
        else:
            print(f"Good job, {name}! You guessed my number in {guesses_taken} guesses!")
            break

guess_the_number()

20.
def imdb_above_5_5(movie_name, movies):
    for movie in movies:
        if movie['name'] == movie_name:
            return movie['imdb'] > 5.5
    return False

movie_name = input("Введите название фильма: ")
result = imdb_above_5_5(movie_name, movies)
print(f"Оценка IMDB фильма {movie_name} выше 5.5:", result)
21.
def movies_above_5_5(movies):
    result = [movie for movie in movies if movie['imdb'] > 5.5]
    return result

result = movies_above_5_5(movies)
print("Фильмы с оценкой IMDB выше 5.5:")
for movie in result:
    print(movie['name'])
22.
def movies_in_category(category, movies):
    result = [movie['name'] for movie in movies if movie['category'] == category]
    return result

category = input("Введите категорию: ")
result = movies_in_category(category, movies)
if result:
    print(f"Фильмы в категории '{category}':")
    for movie in result:
        print(movie)
else:
    print(f"Фильмы в категории '{category}' не найдены.")
23.
def average_imdb_score(movies):
    total_imdb_score = sum(movie['imdb'] for movie in movies)
    average_score = total_imdb_score / len(movies)
    return average_score

average_score = average_imdb_score(movies)
print("Средний балл IMDB для всех фильмов:", average_score)
24.
def average_imdb_score_by_category(category, movies):
    category_movies = [movie for movie in movies if movie['category'] == category]
    if not category_movies:
        return None
    
    total_imdb_score = sum(movie['imdb'] for movie in category_movies)
    average_score = total_imdb_score / len(category_movies)
    return average_score

category = input("Введите категорию: ")
average_score = average_imdb_score_by_category(category, movies)
if average_score is not None:
    print(f"Средний балл IMDB для фильмов в категории '{category}':", average_score)
else:
    print(f"Фильмы в категории '{category}' не найдены или не имеют оценок IMDB.")

